{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCEjCK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGJ,yBAAKJ,UAAU,SAASI,ICapBC,EAlBA,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uG,gBCYG,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAChBC,GAAI,IACJb,QAAS,mCACTc,KAAM,2BACNhB,WAAW,GAEf,OAAOW,EAAQM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,MAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,Q,4NCf7C,IAoFeK,EApFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,oBAAU,WACNC,IAAqBlB,KAAK,SAAAmB,GAAY,OAAIT,EAASS,MACpD,IAEH,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,OAAO,SAAAzC,GAAI,OAAIA,EAAKG,YA8B1DuC,EAAqB,SAAAxB,GACvB,IAAMlB,EAAO6B,EAAMc,KAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,IAChC2B,E,qVAAW,IAAQ7C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACYpB,EAAI2B,GACXzB,KAAK,SAAA0B,GACFhB,EACID,EAAMkB,IAAI,SAAA/C,GAAI,OAAKA,EAAKkB,KAAOA,EAAKlB,EAAO8C,OAGlDE,MAAM,SAAAC,GACHb,EAAgB,SAAD,OACFpC,EAAKK,QADH,sCAGf6C,WAAW,WACPd,EAAgB,OACjB,KACHN,EAASD,EAAMY,OAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,QAIhD,OACI,6BACI,qCAEA,kBAAC,EAAD,CAAcV,QAAS2B,IAEvB,6BACI,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BA5DJO,EAAYO,IAAI,SAAA/C,GAAI,OAChB,kBAAC,EAAD,CACImD,IAAKnD,EAAKkB,GACVlB,KAAMA,EACNC,iBAAkB,kBAAMyC,EAAmB1C,EAAKkB,UAyDpD,0BAAMkC,SAjDE,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAa,CACflD,QAAS0B,EACTZ,MAAM,IAAIqC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGvBtB,EAAmBiB,GAAYnC,KAAK,SAAAE,GAChCQ,EAASD,EAAMN,OAAOD,IACtBU,EAAW,QAuCP,2BAAO6B,MAAO9B,EAAS+B,SAtDV,SAAAT,GACrBrB,EAAWqB,EAAMU,OAAOF,UAsDhB,4BAAQG,KAAK,UAAb,SAGJ,kBAAC,EAAD,Q,MChFZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a4cae401.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return <div className='error'>{message}</div>\n}\n\nexport default Notification\n","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16,\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>\n                Note app, Department of Computer Science, University of Helsinki\n                2019\n            </em>\n        </div>\n    )\n}\n\nexport default Footer\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService.getAll().then(initialNotes => setNotes(initialNotes))\n    }, [])\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    const rows = () =>\n        notesToShow.map(note => (\n            <Note\n                key={note.id}\n                note={note}\n                toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        ))\n\n    const handleNoteChange = event => {\n        setNewNote(event.target.value)\n    }\n\n    const addNote = event => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1,\n        }\n\n        noteService.create(noteObject).then(data => {\n            setNotes(notes.concat(data))\n            setNewNote('')\n        })\n    }\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(\n                    notes.map(note => (note.id !== id ? note : returnedNote))\n                )\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={errorMessage} />\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>{rows()}</ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange} />\n                <button type='submit'>save</button>\n            </form>\n\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}